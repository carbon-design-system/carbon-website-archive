{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"3. Using APIs\",\n  \"internal\": false,\n  \"tabs\": [\"React\", \"Vue\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar AnchorLinks = makeShortcode(\"AnchorLinks\");\nvar Row = makeShortcode(\"Row\");\nvar Column = makeShortcode(\"Column\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"This step takes our static components and populates them with data from the GitHub GraphQL API \\u2013 loading states and all. We\\u2019ll be displaying Carbon repository information in a data table.\"), mdx(AnchorLinks, {\n    mdxType: \"AnchorLinks\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fork-clone-and-branch\"\n  }), \"Fork, clone and branch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#install-dependencies\"\n  }), \"Install dependencies\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-access-token\"\n  }), \"Create access token\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-access-token\"\n  }), \"Connect to Apollo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fetch-data\"\n  }), \"Fetch data\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#populate-data-table\"\n  }), \"Populate data table\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-loading\"\n  }), \"Add loading\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-pagination\"\n  }), \"Add pagination\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#submit-pull-request\"\n  }), \"Submit pull request\")))), mdx(\"h3\", null, \"Preview\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.github.com/v4/\"\n  }), \"GitHub GraphQL API\"), \" is very well documented, and even though the focus of this tutorial isn\\u2019t learning and using GraphQL, it\\u2019s a great opportunity to fetch Carbon-related data for this Carbon tutorial.\"), mdx(\"p\", null, \"To do so, we\\u2019ll be using Apollo Client, the front-end component of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/intro/platform\"\n  }), \"Apollo Platform\"), \". Apollo provides several open source tools for using GraphQL throughout your application\\u2019s stack. Apollo Client is a sophisticated GraphQL client that manages data and state in an application.\"), mdx(\"p\", null, \"A \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vue-step-4--carbon-tutorial-vue.netlify.com\"\n  }), \"preview\"), \" of what you will build (see repositories page):\"), mdx(Row, {\n    mdxType: \"Row\"\n  }, mdx(Column, {\n    offsetLg: \"4\",\n    mdxType: \"Column\"\n  }, mdx(\"iframe\", {\n    height: \"400\",\n    title: \"Carbon Tutorial Step 3\",\n    src: \"https://vue-step-4--carbon-tutorial-vue.netlify.com\",\n    frameborder: \"no\",\n    allowtransparency: \"true\",\n    allowfullscreen: \"true\",\n    className: \"bx--iframe bx--iframe--border\"\n  }))), mdx(\"h2\", null, \"Fork, clone and branch\"), mdx(\"p\", null, \"This tutorial has an accompanying GitHub repository called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" that we\\u2019ll use as a starting point for each step. If you haven\\u2019t forked and cloned that repository yet, and haven\\u2019t added the upstream remote, go ahead and do so by following the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/step-2/vue#fork-clone--branch\"\n  }), \"step 2 instructions\"), \".\"), mdx(\"h3\", null, \"Branch\"), mdx(\"p\", null, \"With your repository all set up, let\\u2019s check out the branch for this tutorial step\\u2019s starting point.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git fetch upstream\\n$ git checkout -b vue-step-3 upstream/vue-step-3\\n\")), mdx(\"h3\", null, \"Build and start app\"), mdx(\"p\", null, \"Install the app\\u2019s dependencies:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn\\n\")), mdx(\"p\", null, \"Then, start the app:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn serve\\n\")), mdx(\"p\", null, \"You should see something similar to where the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/step-2/vue\"\n  }), \"previous step\"), \" left off. Stop your app with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL-C\"), \" and let\\u2019s get everything installed.\"), mdx(\"h2\", null, \"Install dependencies\"), mdx(\"p\", null, \"We\\u2019ll shortcut this using the Vue CLI, if you\\u2019d like more information head over to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vue-apollo.netlify.com/guide/installation.html#vue-cli-plugin\"\n  }), \"Vue Apollo Installation\"), \" for details.\"), mdx(\"p\", null, \"Install the following\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apollo-boost\"), \" - package containing everything you need to set up Apollo Client\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"graphql\"), \" - parses your GraphQL queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vue-apollo\"), \" - Apollo integration for Vue\")), mdx(\"p\", null, \"Using the command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ vue add apollo\\n\")), mdx(\"p\", null, \"At the following prompts answer \\u2018No\\u2019 to each of the questions.\"), mdx(\"p\", null, \"? Add example code No\\n? Add a GraphQL API Server? No\\n? Configure Apollo Engine? No\"), mdx(\"h2\", null, \"Create access token\"), mdx(\"p\", null, \"You\\u2019ll need a personal access token from your GitHub account in order to make requests to the GitHub API. Check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\"\n  }), \"this guide\"), \" to see how to get one.\"), mdx(\"p\", null, \"When you get to the scope/permissions step, you can leave them all unchecked. We don\\u2019t need any special permissions, we just need access to the public API.\"), mdx(\"p\", null, \"Once you have your token, we need to put it in a place where create-vue-app can use it. When your application is being built and developed, create-vue-app will parse environmental variables in any file that starts with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env\"), \" and make them available under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env.MY_VARIABLE\"), \".\"), mdx(\"p\", null, \"One caveat is that we need to start our variables with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"REACT_APP_\"), \". You can read more about environmental variables in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/create-vue-app/docs/adding-custom-environment-variables\"\n  }), \"create-vue-app\\u2019s guide\"), \".\"), mdx(\"p\", null, \"Since we don\\u2019t want to commit this file to Git, we can put it in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env.local\"), \" which is in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" list. Your file should just have a single line like this one, where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \"s are replaced with your unique token.\"), mdx(\"h5\", null, \".env.local\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"VUE_APP_GITHUB_PERSONAL_ACCESS_TOKEN=xxxxxx\\n\")), mdx(\"p\", null, \"Go ahead and start your app with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn serve\"), \", or, if your app is running, you\\u2019ll need to restart it to get access to this token.\"), mdx(\"h2\", null, \"Connect to Apollo\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-apollo\"), \" library gives us a component that we need to put at the base of our application. Typically the best place for things that need to wrap the entire application is at the root of the application. For us, that\\u2019s at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main.js\"), \".\"), mdx(\"p\", null, \"If you open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main.js\"), \" you will see that the CLI has updated this file as follows:.\"), mdx(\"h5\", null, \"src/main.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import { ApolloProvider } from 'vue-apollo';\\n\\nnew Vue({\\n  router,\\n  apolloProvider: createProvider(),\\n  render: h => h(App),\\n}).$mount('#app');\\n\")), mdx(\"p\", null, \"This is loading from a file the CLI created for you \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/vue-apollo.js\"), \" which we need to update to target the github api.\"), mdx(\"h4\", null, \"src/vue-apollo.js\"), mdx(\"p\", null, \"Update the following values:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// Use our access token\\nAUTH_TOKEN = process.env.VUE_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\\n\\n// Target github api\\nconst httpEndpoint =\\n  process.env.VUE_APP_GRAPHQL_HTTP || 'https://api.github.com/graphql';\\n\\nconst defaultOptions = {\\n  // set wsEndpoint to null\\n  wsEndpoint: process.env.VUE_APP_GRAPHQL_WS,\\n\\n  // Use the form expected by github for authorisation\\n  getAuth: tokenName => `Bearer ${tokenName}`,\\n};\\n\")), mdx(\"h2\", null, \"Fetch data\"), mdx(\"h3\", null, \"Imports\"), mdx(\"p\", null, \"Add the following imports to the top of the script section of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \":\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import gql from 'graphql-tag';\\n\")), mdx(\"h3\", null, \"Query\"), mdx(\"p\", null, \"Next we\\u2019ll assemble our GraphQL query to fetch only the data we need from the GraphQL API. We\\u2019ll do this using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gql\"), \" helper we just imported. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gql\"), \" helper lets you write GraphQL queries using interpolated strings (backticks) in JavaScript. In addition, we\\u2019ll be using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query\"), \" component from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-apollo\"), \" which gives us some great information about our query\\u2019s loading state in addition to the data.\"), mdx(\"p\", null, \"You can use GitHub\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.github.com/v4/explorer/\"\n  }), \"explorer\"), \" tool to write and test your own queries. Try copying the query below and experiment with changing the properties. You can also click the \\u201CDocs\\u201D button in the top right of the explorer to view all of the available data and query parameters.\"), mdx(\"p\", null, \"If you\\u2019d like some more information regarding writing queries and using the Query component, we recommend \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/tutorial/queries\"\n  }), \"Apollo\\u2019s documentation\"), \" on this topic.\"), mdx(\"p\", null, \"Add this after your imports:\"), mdx(\"p\", null, \"Replace the rows constant with this query in the script section.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"const REPO_QUERY = gql`\\n  query REPO_QUERY {\\n    # Let's use carbon as our organization\\n    organization(login: \\\"carbon-design-system\\\") {\\n      # We'll grab all the repositories in one go. To load more resources\\n      # continuously, see the advanced topics.\\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\\n        totalCount\\n        nodes {\\n          url\\n          homepageUrl\\n          issues(filterBy: { states: OPEN }) {\\n            totalCount\\n          }\\n          stargazers {\\n            totalCount\\n          }\\n          releases(first: 1) {\\n            totalCount\\n            nodes {\\n              name\\n            }\\n          }\\n          name\\n          updatedAt\\n          createdAt\\n          description\\n          id\\n        }\\n      }\\n    }\\n  }\\n`;\\n\")), mdx(\"p\", null, \"We should have our table headers set in a previous step that are good to go.\"), mdx(\"p\", null, \"Next let\\u2019s we need to configure apollo in our component script, adding the following after the data() declaration.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"apollo: {\\n  organization: REPO_QUERY\\n},\\n\")), mdx(\"p\", null, \"At this point, we should run our query view the raw the results to verify that the request is working.\"), mdx(\"p\", null, \"In RepoPage.vue add the following before the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" tag.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"{{ this.organization }}\\n\")), mdx(\"p\", null, \"When the data loads you should see the response rendered on your repository page. If not check the console to see if there are any errors and fix.\"), mdx(\"p\", null, \"Revert this last change and continue.\"), mdx(\"p\", null, \"This data is not quite in the format our RepoTable component is expecting so we\\u2019ll use a computed property to transform it. Computed properties in Vue cache and watch their reactive dependencies for us.\"), mdx(\"p\", null, \"Remove \\u2018rows\\u2019 from the data declaration and add this computed property.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"computed: {\\n  rows() {\\n      if (!this.organization) {\\n      return [];\\n    } else {\\n      return this.organization.repositories.nodes.map(row => ({\\n        ...row,\\n        key: row.id,\\n        stars: row.stargazers.totalCount,\\n        issueCount: row.issues.totalCount,\\n        createdAt: new Date(row.createdAt).toLocaleDateString(),\\n        updatedAt: new Date(row.updatedAt).toLocaleDateString(),\\n        links: { url: row.url, homepageUrl: row.homepageUrl }\\n      }));\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"At this point you have a working table but the links column clearly isn\\u2019t what we want.\"), mdx(\"h3\", null, \"Helper component\"), mdx(\"p\", null, \"This column in the data table will be a list of repository and home page links, so let\\u2019s create a component called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LinkList\"), \".\"), mdx(\"p\", null, \"Add the following to create your component:\"), mdx(\"p\", null, \"A template section\"), mdx(\"h5\", null, \"src/content/RepoPage/LinkList.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<ul class=\\\"link-list\\\">\\n  <li>\\n    <cv-link :href=\\\"url\\\">GitHub</cv-link>\\n  </li>\\n\\n  <li v-if=\\\"homepageUrl\\\">\\n    <span>&nbsp;|&nbsp;</span>\\n    <cv-link :href=\\\"homepageUrl\\\">Homepage</cv-link>\\n  </li>\\n</ul>\\n\")), mdx(\"p\", null, \"A script section\"), mdx(\"h5\", null, \"src/content/RepoPage/LinkList.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"export default {\\n  name: 'LinkList',\\n  props: {\\n    url: String,\\n    homepageUrl: String,\\n  },\\n};\\n\")), mdx(\"p\", null, \"And a style section\"), mdx(\"h5\", null, \"src/content/RepoPage/LinkList.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".link-list {\\n  display: flex;\\n}\\n\")), mdx(\"p\", null, \"Now let\\u2019s make use of this component in our RepoTable component.\"), mdx(\"p\", null, \"At the top of the script section import the link list component:\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import LinkList from './LinkList';\\n\")), mdx(\"p\", null, \"And below the name of the component added\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  components: { LinkList },\\n\")), mdx(\"p\", null, \"Then make use of it in our template replacing:\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-data-table-cell\\n  v-for=\\\"(cell, cellIndex) in row.data\\\"\\n  :key=\\\"`${cellIndex}`\\\"\\n  >{{cell}}</cv-data-table-cell>\\n\")), mdx(\"p\", null, \"with\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-data-table-cell v-for=\\\"(cell, cellIndex) in row.data\\\" :key=\\\"`${cellIndex}`\\\">\\n  <template v-if=\\\"!cell.url\\\">\\n    {{cell}}\\n  </template>\\n  <link-list v-else :url=\\\"cell.url\\\" :homepage-url=\\\"cell.homepageUrl\\\" />\\n</cv-data-table-cell>\\n\")), mdx(\"p\", null, \"Here in order to switch between the stanard rendering of a data cell we\\u2019ve wrapped our standard {{cell}} rendering in a template tag. The template tag is non-rendering so will dissapear leaving us with the same content as before.\"), mdx(\"p\", null, \"Using the v-if and v-else directives we switch based on the contents of hte cell between the standard rendering and the LinkList component.\"), mdx(\"p\", null, \"Checking our output again you should now see the LinkList component rendering the final column.\"), mdx(\"p\", null, \"Next we\\u2019ll update our row description, update the computed property data() in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable.vue\"), \" to have the following description.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  description: row.description\\n\")), mdx(\"p\", null, \"Check the output again and you should find the descriptions are updated.\"), mdx(\"p\", null, \"After this many refreshes you may have noticed a slight delay in the data loading. As outlined in the (documentation)\", \"[https://vue-apollo.netlify.com/guide/apollo/#apollo]\", \" all components contained under one with an apolloProvider have a \\\\$apollo attribute. As we added the apolloProvider to our app when creating the Vue instance it is available to us everywhere.\"), mdx(\"p\", null, \"We can use the property to react to (loading state)\", \"[https://vue-apollo.netlify.com/guide/apollo/queries.html#loading-state]\", \".\"), mdx(\"p\", null, \"First lets demonstrate that this works.\"), mdx(\"h4\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"p\", null, \"Pass the loading state into our RepoTable component by updating the template with the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<RepoTable :headers=\\\"headers\\\" :rows=\\\"rows\\\" :loading=\\\"$apollo.loading\\\" />\\n\")), mdx(\"p\", null, \"Next add this property to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" component\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  props: {\\n    headers: Array,\\n    rows: Array,\\n    title: String,\\n    helperText: String,\\n    loading: Boolean,\\n  },\\n\")), mdx(\"p\", null, \"Making use of the property to display a loading message.\"), mdx(\"p\", null, \"Replace\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-data-table :columns=\\\"columns\\\"\\n\")), mdx(\"p\", null, \"with\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div v-if=\\\"loading\\\">Loading...</div>\\n<cv-data-table v-else :columns=\\\"columns\\\"\\n\")), mdx(\"p\", null, \"Here we have made use of the v-if and v-else directives to switch content based on the state of \\\\$apollo.loading. If you refresh your app you should see this take effect.\"), mdx(\"p\", null, \"Now that we know this is works let\\u2019s try something a bit more sophisticated and replace the div containing our loading message with use of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvDataTableSkeleton\"), \" component.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-data-table-skeleton\\n  v-if=\\\"loading\\\"\\n  :columns=\\\"columns\\\"\\n  :title=\\\"title\\\"\\n  :helper-text=\\\"helperText\\\"\\n  :rows=\\\"10\\\"\\n/>\\n\")), mdx(\"p\", null, \"We need to tell the loading skeleton how many rows to render, so let\\u2019s use 10 skeleton rows to prepare for the next enhancement\\u2026\"), mdx(\"h2\", null, \"Add pagination\"), mdx(\"p\", null, \"Pagination! Instead of rendering every repository, let\\u2019s add pagination to the data table to only render 10 at a time. Depending on your specific requirements, you may need to fetch new data each time that you interact with the pagination component, but for simplicity, we\\u2019re going to make one request to fetch all data, and then paginate the in-memory row data.\"), mdx(\"p\", null, \"Let\\u2019s start by adjusting our `PageTable\\u2019 component template to add pagination. If you review the (storybook notes)\", \"[http://vue.carbondesignsystem.com/?path=/info/components-cvdatatable\\u2014default]\", \" you\\u2019ll see that pagination is added to the data table by supplying a pagination object and listening for pagination events as follows.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"  <cv-data-table\\n    v-else\\n    :columns=\\\"columns\\\"\\n    :title=\\\"title\\\"\\n    :helper-text=\\\"helperText\\\"\\n    :pagination=\\\"{ numberOfItems: this.totalRows }\\\"\\n    @pagination=\\\"$emit('pagination', $event)\\\"\\n>\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: \\u2018:prop\\u2019 is an abrieviation of \\u2018v-bind:prop\\u2019\"), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: \\u2018@event\\u2019 is an abreviation of \\u2018v-on:event\\u2019\")), mdx(\"p\", null, \"In the pagination event we\\u2019ve used $emit and $event to re-raise the pagination event to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage\"), \" component so that it can arrange to pass only the rows we want to see to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" component.\"), mdx(\"p\", null, \"We also need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"totalRows\"), \" property used in the data tables pagination property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"totalRows: Number;\\n\")), mdx(\"p\", null, \"Next to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage\"), \" component, let\\u2019s first update our template by updating our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" use with the following attributes.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \":rows=\\\"pagedRows\\\" :totalRows=\\\"rows.length\\\" @pagination=\\\"onPagination\\\"\\n\")), mdx(\"p\", null, \"Next in the data property of our component add the following to support our pagination.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  pageSize: 0,\\n  pageStart: 0,\\n  page: 0\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: We could have passed values for pageSize and page into our pagination component if we had a specific page or page size we wanted to start with. Instead we are relying on the pagination component to set some sensible defaults and provide us with the details through an event.\")), mdx(\"p\", null, \"Then before we can see our paginated table we need to add; a pagedRows computed property to select the slice of input rows we are interested in, and a method to handle the pagination event.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"computed: {\\n  // other computed properties\\n  // ...\\n  pagedData() {\\n    return this.data.slice(this.pageStart, this.pageStart + this.pageSize);\\n  }\\n},\\nmethods: {\\n  onPagination(val) {\\n    this.pageSize = val.length;\\n    this.pageStart = val.start;\\n    this.page = val.page;\\n  }\\n};\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Like the other Carbon Vue components,\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pagination\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"component examples can be found in \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"http://vue.carbondesignsystem.com/?path=/story/components-cvpagination--default\"\n  }), \"Storybook\"), \" by browsing the story and knobs.\")), mdx(\"p\", null, \"That does it! Your data table should fetch GitHub data on first render. You can expand each row to see the repository\\u2019s description. You can modify the pagination items per page and cycle through pages or jump to a specific page of repositories.\"), mdx(\"h2\", null, \"Mystery\"), mdx(\"p\", null, \"Hmmm, there is at least one more issue to resolve. If you expand a row or two to see the repository descriptions you will and then change page. What happens?\"), mdx(\"p\", null, \"Assuming you didn\\u2019t catch this earlier you will find that the expanded rows, stay expanded after paging. That is if row two was expanded before pagination it is expanded after.\"), mdx(\"p\", null, \"This is becuase we chose a poor values to use as our row and cell keys as we iterated over them. The result is that Vue sees these items as having the same key and makes the assumption that content but not state has changed.\"), mdx(\"p\", null, \"To fix this add the following line to the computed rows property of the RepoPage component you should be able to find something better.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"console.dir(this.organization.repositories.nodes);\\n\")), mdx(\"p\", null, \"_\", \"Hint: id and url are likely unique properties, you could use either of these to update the prototype. In fact we already pass the id value to RepoTable.\"), mdx(\"p\", null, \"Can you fix it?\"), mdx(\"h2\", null, \"Submit pull request\"), mdx(\"p\", null, \"We\\u2019re going to submit a pull request to verify completion of this tutorial step.\"), mdx(\"h3\", null, \"Continuous integration (CI) check\"), mdx(\"p\", null, \"Run the CI check to make sure we\\u2019re all set to submit a pull request.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn ci-check\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Having issues running the CI check? \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#continuous-integration-(ci)-check\"\n  }), \"Step 1\"), \" has troubleshooting notes that may help.\")), mdx(\"h3\", null, \"Git commit and push\"), mdx(\"p\", null, \"Before we can create a pull request, stage and commit all of your changes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git add --all && git commit -m \\\"feat(tutorial): complete step 3\\\"\\n\")), mdx(\"p\", null, \"Then, push to your repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git push origin vue-step-3\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Having issues pushing your changes? \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#git-commit-and-push\"\n  }), \"Step 1\"), \" has troubleshooting notes that may help.\")), mdx(\"h3\", null, \"Pull request (PR)\"), mdx(\"p\", null, \"Finally, visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" to \\u201CCompare & pull request\\u201D. In doing so, make sure that you are comparing to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-step-3\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base: vue-step-3\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Expect your tutorial step PRs to be reviewed by the Carbon team but not merged. We\\u2019ll close your PR so we can keep the repository\\u2019s remote branches pristine and ready for the next person!\")));\n}\nMDXContent.isMDXComponent = true;"},"fields":{"slug":"/tutorial/step-3/vue","currentPage":"vue"},"frontmatter":{"title":"3. Using APIs","label":null,"tabs":["React","Vue"],"internal":false}}},"pageContext":{"slug":"/tutorial/step-3/vue","currentPage":"vue"}}