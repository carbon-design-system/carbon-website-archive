{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"4. Creating components\",\n  \"internal\": false,\n  \"tabs\": [\"React\", \"Vue\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar AnchorLinks = makeShortcode(\"AnchorLinks\");\nvar Row = makeShortcode(\"Row\");\nvar Column = makeShortcode(\"Column\");\nvar ImageComponent = makeShortcode(\"ImageComponent\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"With two pages comprised entirely of Carbon components, let\\u2019s revisit the landing page and build a couple components of our own by using Carbon icons and tokens.\"), mdx(AnchorLinks, {\n    mdxType: \"AnchorLinks\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fork-clone-and-branch\"\n  }), \"Fork, clone and branch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#review-design\"\n  }), \"Review design\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-components\"\n  }), \"Create components\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#use-components\"\n  }), \"Use components\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-styling\"\n  }), \"Add styling\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#check-accessibility\"\n  }), \"Check accessibility\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#submit-pull-request\"\n  }), \"Submit pull request\")))), mdx(\"h2\", null, \"Preview\"), mdx(\"p\", null, \"Carbon provides a solid foundation for building web applications through its color palette, layout, spacing, type, as well as common building blocks in the form of components. So far, we\\u2019ve only used Carbon components to build out two pages.\"), mdx(\"p\", null, \"Next, we\\u2019re going to use Carbon assets to build application-specific components. We\\u2019ll do so by including accessibility and responsive considerations all throughout.\"), mdx(\"p\", null, \"A \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vue-step-5--carbon-tutorial.netlify.com\"\n  }), \"preview\"), \" of what you\\u2019ll build (see bottom of page):\"), mdx(Row, {\n    mdxType: \"Row\"\n  }, mdx(Column, {\n    offsetLg: \"4\",\n    mdxType: \"Column\"\n  }, mdx(\"iframe\", {\n    height: \"400\",\n    title: \"Carbon Tutorial Step 4\",\n    src: \"https://vue-step-5--carbon-tutorial.netlify.com\",\n    frameborder: \"no\",\n    allowtransparency: \"true\",\n    allowfullscreen: \"true\",\n    className: \"bx--iframe bx--iframe--border\"\n  }))), mdx(\"h2\", null, \"Fork, clone and branch\"), mdx(\"p\", null, \"This tutorial has an accompanying GitHub repository called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial\"), \" that we\\u2019ll use as a starting point for each step. If you haven\\u2019t forked and cloned that repository yet, and haven\\u2019t added the upstream remote, go ahead and do so by following the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#fork-clone--branch\"\n  }), \"step 1 instructions\"), \".\"), mdx(\"h3\", null, \"Branch\"), mdx(\"p\", null, \"With your repository all set up, let\\u2019s check out the branch for this tutorial step\\u2019s starting point.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git fetch upstream\\n$ git checkout -b vue-step-4 upstream/vue-step-4\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: This builds on top of step 3, but be sure to check out the upstream step 4 branch because it includes the static assets required to get through this step.\")), mdx(\"h3\", null, \"Build and start app\"), mdx(\"p\", null, \"Install the app\\u2019s dependencies (in case you\\u2019re starting fresh in your current directory and not continuing from the previous step):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn\\n\")), mdx(\"p\", null, \"Then, start the app:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn serve\\n\")), mdx(\"p\", null, \"You should see something similar to where the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/step-3/vue\"\n  }), \"previous step\"), \" left off.\"), mdx(\"h2\", null, \"Review design\"), mdx(\"p\", null, \"Here\\u2019s what we\\u2019re building \\u2013 an informational section that has a heading and three subheadings. Each subheading has accompanying copy and a pictogram. We\\u2019ll assume that this informational section is used elsewhere on the site, meaning it\\u2019s a great opportunity to build it as a resusable component. As for naming, we\\u2019ll call it an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoSection\"), \" with three \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard\"), \"s as children.\"), mdx(ImageComponent, {\n    cols: \"12\",\n    caption: \"Info section layout\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"36.24454148471616%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Info section layout\",\n    \"title\": \"\",\n    \"src\": \"/static/8cf9fc4b464f9f414da13476f19e600e/24bd0/info-layout.png\",\n    \"srcSet\": [\"/static/8cf9fc4b464f9f414da13476f19e600e/7cb4c/info-layout.png 280w\", \"/static/8cf9fc4b464f9f414da13476f19e600e/7ff44/info-layout.png 560w\", \"/static/8cf9fc4b464f9f414da13476f19e600e/24bd0/info-layout.png 1120w\", \"/static/8cf9fc4b464f9f414da13476f19e600e/7e58d/info-layout.png 1680w\", \"/static/8cf9fc4b464f9f414da13476f19e600e/8ef2b/info-layout.png 2240w\", \"/static/8cf9fc4b464f9f414da13476f19e600e/56754/info-layout.png 2748w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"h2\", null, \"Create components\"), mdx(\"p\", null, \"First we need files for the components, so create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Info\"), \" folder in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components\"), \". Even though we\\u2019re building multiple components, their names all start with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Info\"), \", so it makes sense to have them share one folder in components. Create these files:\"), mdx(\"h3\", null, \"Add files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"src/components/Info\\n\\u251C\\u2500\\u2500index.js\\n\\u2514\\u2500\\u2500Info.vue\\n\")), mdx(\"p\", null, \"Like our other components, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" will serve as an entrypoint.\"), mdx(\"h5\", null, \"src/components/Info/index.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import Info from './Info';\\nimport InfoCard from './InfoCard';\\n\\nexport { Info, InfoCard };\\n\")), mdx(\"h3\", null, \"InfoSection component\"), mdx(\"p\", null, \"Let\\u2019s create the parent component that includes the \\u201CThe Principles\\u201D heading. That markup currently looks like this in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \":\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div className=\\\"bx--row landing-page__r3\\\">\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">\\n    <h3 className=\\\"landing-page__label\\\">The Principles</h3>\\n  </div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Open</div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Modular</div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Consistent</div>\\n</div>\\n\")), mdx(\"p\", null, \"We want to do a few things when abstracting it to a component. First, we only want Carbon (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--\"), \") and this component\\u2019s class names; we don\\u2019t want to include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"landing-page__r3\"), \" as that\\u2019s specific to the landing page. That will be passed in as a property to the component.\"), mdx(\"p\", null, \"We\\u2019ll also:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add component class names like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"info-section\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"info-section__heading\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Semantically use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<section>\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<div>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update the grid columns to match the design\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"The Principles\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{{heading}}\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace columns 2 - 4 with a slot.\")), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" we can render any heading and any number of children components (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard\"), \" that we\\u2019ll build soon.)\"), mdx(\"h5\", null, \"src/components/Info/Info.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <section class=\\\"bx--row info-section\\\">\\n    <div class=\\\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\\\">\\n      <h3 class=\\\"info-section__heading\\\">{{ heading }}</h3>\\n    </div>\\n    <slot />\\n  </section>\\n</template\\n\")), mdx(\"p\", null, \"Then name our component and add a property to the script section.\"), mdx(\"h5\", null, \"src/components/Info/Info.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<script>\\nexport default {\\n  name: \\\"Info\\\",\\n  props: {\\n    heading: String\\n  }\\n};\\n</script\\n\")), mdx(\"p\", null, \"At this point let\\u2019s add styling for the new class names that we just added.\"), mdx(\"h5\", null, \"src/components/Info/info.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"<style lang=\\\"scss\\\">\\n.info-section__heading {\\n  @include carbon--type-style('heading-01');\\n}\\n</style>\\n\")), mdx(\"h3\", null, \"InfoCard component\"), mdx(\"p\", null, \"Next up we\\u2019re going to build a component for columns 2 - 4, which currently looks like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Open</div>\"), \". Create a new file InfoCard.vue, add:\"), mdx(\"h5\", null, \"src/components/Info/InfoCard.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <article\\n    class=\\\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\\\"\\n  >\\n    <h4 class=\\\"info-card__heading\\\">{{ heading }}</h4>\\n    <p class=\\\"info-card__body\\\">{{ body }}</p>\\n    <component :is=\\\"icon\\\" />\\n  </article>\\n</template>\\n\")), mdx(\"p\", null, \"Give it a name and add props\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<script>\\nexport default {\\n  name: \\\"InfoCard\\\",\\n  props: {\\n    heading: String,\\n    body: String,\\n    icon: Object\\n  }\\n};\\n</script>\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Make sure to export the two components from index.js!\")), mdx(\"p\", null, \"In doing so, we:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used the semantic \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<article>\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<div>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"info-card\"), \" classes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"props\"), \" to render the heading, body copy, and icon\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set columns to match the grid\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: At extra large viewports, we are using \"), mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--col-xlg-3 bx--offset-xlg-1\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \" so each column takes up 3 of the 16 grid columns, with a 1 column offset.\")), mdx(\"h2\", null, \"Use components\"), mdx(\"p\", null, \"Nothing is styled yet, but with our components built let\\u2019s put them to use. In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \", import the components towards the top of the script section.\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<script>\\nimport { InfoSection, InfoCard } from '../../components/Info';\\n\\nexport default {\\n  name: 'LandingPage',\\n  components: { InfoSection, InfoCard };\\n};\\n</script>\\n\")), mdx(\"p\", null, \"While we\\u2019re at the here next to the component imports let\\u2019s, import the icons that we\\u2019ll need as well.\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import Globe32 from '@carbon/icons-vue/lib/globe/32';\\nimport PersonFavorite32 from '@carbon/icons-vue/lib/person--favorite/32';\\nimport Application32 from '@carbon/icons-vue/lib/application/32';\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: You\\u2019ll notice that these 32px icons aren\\u2019t the pictograms as designed. The Carbon team is currently working on adding pictograms to the icons packages. Until then, we\\u2019ll use the biggest SVGs.\")), mdx(\"p\", null, \"Don\\u2019t forget to add the icons to the list of components used in our template. Wait a minute, are they being used by our template? Well yes and no. The components are being passed as an attribute rather than being used as a dom element. Vue treats this use case differently and instead of adding to the components property we need to assign the icons directly to the \\u2018this\\u2019 object. We can achieve this in a number of different ways, the following is my preferred method.\"), mdx(\"p\", null, \"In the script section of the component use the lifecycle method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"created()\"), \" to add the icons to the component.\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  created() {\\n    // Add icons to this\\n    Object.assign(this, {\\n      Globe32,\\n      PersonFavorite32,\\n      Application32\\n    });\\n  }\\n\")), mdx(\"p\", null, \"With everything imported, replace the current template content:\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div className=\\\"bx--row landing-page__r3\\\">\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">\\n    <h3 className=\\\"landing-page__label\\\">The Principles</h3>\\n  </div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Open</div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Modular</div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Consistent</div>\\n</div>\\n\")), mdx(\"p\", null, \"With the new components:\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<InfoSection heading=\\\"The Principles\\\" class=\\\"landing-page__r3\\\">\\n</InfoSection>\\n\")), mdx(\"p\", null, \"Then slot the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard\"), \" content inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoSection\"), \" tag to give.\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<InfoSection heading=\\\"The Principles\\\" class=\\\"landing-page__r3\\\">\\n  <InfoCard\\n    heading=\\\"Carbon is Open\\\"\\n    body=\\\"It's a distributed effort, guided by the principles of the open-source movement. Carbon's users are also it's makers, and everyone is encouraged to contribute.\\\"\\n    :icon=\\\"PersonFavorite32\\\"\\n  />\\n  <InfoCard\\n    heading=\\\"Carbon is Modular\\\"\\n    body=\\\"Carbon's modularity ensures maximum flexibility in execution. It's components are designed to work seamlessly with each other, in whichever combination suits the needs of the user.\\\"\\n    :icon=\\\"Application32\\\"\\n  />\\n  <InfoCard\\n    heading=\\\"Carbon is Consistent\\\"\\n    body=\\\"Based on the comprehensive IBM Design Language, every element and component of Carbon was designed from the ground up to work elegantly together to ensure consistent, cohesive user experiences.\\\"\\n    :icon=\\\"Globe32\\\"\\n  />\\n</InfoSection>\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Now is a good time to resize your browser from phone to extra large viewport widths to see how the responsive grid is working before we add further styling.\")), mdx(\"h2\", null, \"Add styling\"), mdx(\"p\", null, \"Here\\u2019s our design showing the spacing tokens that we need to add. We also need to set type style and borders.\"), mdx(ImageComponent, {\n    cols: \"12\",\n    caption: \"Info section spacing\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"36.24454148471616%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Info section spacing\",\n    \"title\": \"\",\n    \"src\": \"/static/b70a1121747b250385e039a8075abf38/24bd0/info-spacing.png\",\n    \"srcSet\": [\"/static/b70a1121747b250385e039a8075abf38/7cb4c/info-spacing.png 280w\", \"/static/b70a1121747b250385e039a8075abf38/7ff44/info-spacing.png 560w\", \"/static/b70a1121747b250385e039a8075abf38/24bd0/info-spacing.png 1120w\", \"/static/b70a1121747b250385e039a8075abf38/7e58d/info-spacing.png 1680w\", \"/static/b70a1121747b250385e039a8075abf38/8ef2b/info-spacing.png 2240w\", \"/static/b70a1121747b250385e039a8075abf38/56754/info-spacing.png 2748w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"h3\", null, \"Layout\"), mdx(\"p\", null, \"Starting with layout, add the style section to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/Info/InfoCard.vue\"), \".\"), mdx(\"h5\", null, \"src/components/Info/InfoCard.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"<style lang=\\\"scss\\\">\\n@import \\\"../../styles/carbon-utils\\\";\\n\\n.info-card {\\n  margin-top: $spacing-09;\\n  display: flex;\\n  flex-direction: column;\\n\\n  svg {\\n    margin-top: $spacing-09;\\n  }\\n\\n  // top border in only small breakpoints to prevent overrides\\n  @include carbon--breakpoint-down(md) {\\n    &:not(:nth-child(2)) {\\n      border-top: 1px solid $ui-03;\\n      padding-top: $spacing-09;\\n    }\\n  }\\n\\n  // left border in just the 2nd column items\\n  @include carbon--breakpoint(md) {\\n    &:nth-child(odd) {\\n      border-left: 1px solid $ui-03;\\n    }\\n  }\\n\\n  // left border in all items\\n  @include carbon--breakpoint(lg) {\\n    margin-top: 0;\\n    border-left: 1px solid $ui-03;\\n\\n    svg {\\n      margin-top: $layout-06;\\n    }\\n  }\\n}\\n</style>\\n\")), mdx(\"p\", null, \"Once you save, go ahead and resize your browser to see the responsive layout at the different breakpoints. Make sure to review these color and spacing tokens. There are also a few breakpoint mixins that may be new to you. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@carbon/layout\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon/blob/master/packages/layout/docs/sass.md\"\n  }), \"SassDoc\"), \" is a great reference to see what all is available.\"), mdx(\"h3\", null, \"Type\"), mdx(\"p\", null, \"Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard\"), \" headings look to be too small. We need to increase their font sizes according to the design spec with:\"), mdx(\"h5\", null, \"src/components/Info/\\\\InfoCard.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".info-card__heading {\\n  @include carbon--type-style('productive-heading-03');\\n}\\n\")), mdx(\"p\", null, \"Also, the design has the last word in each subheading as bold. To accomplish that, add this computed property to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard.vue\"), \".\"), mdx(\"h5\", null, \"src/components/Info/InfoSection.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"computed: {\\n// Take in a phrase and separate the third word in an array\\n  splitHeading() {\\n    const splitHeading = this.heading.split(\\\" \\\");\\n    const finalWord = splitHeading.pop();\\n    return [splitHeading.join(\\\" \\\"), finalWord];\\n  }\\n}\\n\")), mdx(\"p\", null, \"Then, update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard.vue\"), \" to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"splitHeading\"), \".\"), mdx(\"h5\", null, \"src/components/Info/InfoCard.vue\"), mdx(\"p\", null, \"Replacing\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<h4 class=\\\"info-card__heading\\\">\\n  {{heading}}\\n</h4>\\n\")), mdx(\"p\", null, \"with\"), mdx(\"h5\", null, \"src/components/Info/InfoCard.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<h4 class=\\\"info-card__heading\\\">\\n  {{ splitHeading[0] }}\\n  <strong>{{ splitHeading[1] }}</strong>\\n</h4>\\n\")), mdx(\"p\", null, \"Finally, add the following declaration block in the style section of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard.vue\"), \" to set body copy styles and to bottom-align the icons.\"), mdx(\"h5\", null, \"src/components/Info/\", \"_\", \"info.scss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".info-card__body {\\n  margin-top: $spacing-06;\\n  flex-grow: 1; // fill space so icons are bottom aligned\\n  @include type-style('body-long-01');\\n\\n  // prevent large line lengths between small and medium viewports\\n  @include carbon--breakpoint-between(321px, md) {\\n    max-width: 75%;\\n  }\\n}\\n\")), mdx(\"h2\", null, \"Check accessibility\"), mdx(\"p\", null, \"We\\u2019ve added new markup and styles, so it\\u2019s a good practice to check \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ibm.com/able/dynamic-assessment-plug-in.html\"\n  }), \"DAP\"), \" and make sure our rendered markup is on the right track for accessibility.\"), mdx(\"p\", null, \"With the browser extension installed, Chrome in this example, open Dev Tools and run DAP.\"), mdx(ImageComponent, {\n    cols: \"12\",\n    caption: \"DAP violations\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"54.79797979797979%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"DAP violations\",\n    \"title\": \"\",\n    \"src\": \"/static/d53d52c5afae6e60aa0fdf0a9b12816e/24bd0/DAP-violations.png\",\n    \"srcSet\": [\"/static/d53d52c5afae6e60aa0fdf0a9b12816e/7cb4c/DAP-violations.png 280w\", \"/static/d53d52c5afae6e60aa0fdf0a9b12816e/7ff44/DAP-violations.png 560w\", \"/static/d53d52c5afae6e60aa0fdf0a9b12816e/24bd0/DAP-violations.png 1120w\", \"/static/d53d52c5afae6e60aa0fdf0a9b12816e/34b4f/DAP-violations.png 1584w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"p\", null, \"That first violation is for the off-screen \\u201Cskip to content\\u201D link. This link isn\\u2019t shown and is used to assist screen reading, so the color contrast violation can be ignored.\"), mdx(\"p\", null, \"But, those three other violations came from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<article>\"), \" element used in new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard\"), \". Since the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<article>\"), \" element requires a label, it seems like we may be using the wrong semantic element. A humble \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \" will suffice.\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InfoCard.vue\"), \", replace the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<article>\"), \" opening and closing tags with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \" tags.\"), mdx(\"p\", null, \"Also it\\u2019s time to fix it if you didn\\u2019t but I\\u2019m sure you can manage that by yourself.\"), mdx(\"h2\", null, \"Submit pull request\"), mdx(\"p\", null, \"We\\u2019re going to submit a pull request to verify completion of this tutorial step.\"), mdx(\"h3\", null, \"Continuous integration (CI) check\"), mdx(\"p\", null, \"Run the CI check to make sure we\\u2019re all set to submit a pull request.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn ci-check\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Having issues running the CI check? \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#continuous-integration-(ci)-check\"\n  }), \"Step 1\"), \" has troubleshooting notes that may help.\")), mdx(\"h3\", null, \"Git commit and push\"), mdx(\"p\", null, \"Before we can create a pull request, stage and commit all of your changes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git add --all && git commit -m \\\"feat(tutorial): complete step 4\\\"\\n\")), mdx(\"p\", null, \"Then, push to your repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git push origin vue-step-4\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Having issues pushing your changes? \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#git-commit-and-push\"\n  }), \"Step 1\"), \" has troubleshooting notes that may help.\")), mdx(\"h3\", null, \"Pull request (PR)\"), mdx(\"p\", null, \"Finally, visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial\"\n  }), \"carbon-tutorial\"), \" to \\u201CCompare & pull request\\u201D. In doing so, make sure that you are comparing to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-step-4\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base: vue-step-4\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Expect your tutorial step PRs to be reviewed by the Carbon team but not merged. We\\u2019ll close your PR so we can keep the repository\\u2019s remote branches pristine and ready for the next person!\")));\n}\nMDXContent.isMDXComponent = true;"},"fields":{"slug":"/tutorial/step-4/vue","currentPage":"vue"},"frontmatter":{"title":"4. Creating components","label":null,"tabs":["React","Vue"],"internal":false}}},"pageContext":{"slug":"/tutorial/step-4/vue","currentPage":"vue"}}