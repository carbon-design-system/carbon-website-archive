{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"About experimental\",\n  \"tabs\": [\"Overview\", \"Usage\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Feature-flags\"), mdx(\"p\", null, \"Carbon uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-flags\"), \" to toggle new features on and off. We currently have two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-flags\"), \" available for testing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Experimental Components\"), \" use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"components-x\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"UI Shell\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ui-shell\"), \".\")), mdx(\"p\", null, \"To turn on either of the feature flags, include the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"feature-flag\"), \" variable into your SCSS file before importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"carbon-components\"), \", then set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components-x\"), \" and/or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ui-shell\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"$feature-flags: (\\n  components-x: true,\\n  ui-shell: true,\\n);\\n@import 'carbon-components/src/globals/scss/styles';\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: You must be using Sass to take advantage of code using feature flags. The Sass feature flags determine which CSS is compiled.\")));\n}\nMDXContent.isMDXComponent = true;"},"fields":{"slug":"/experimental/about/usage","currentPage":"usage"},"frontmatter":{"title":"About experimental","label":null,"tabs":["Overview","Usage"],"internal":null}}},"pageContext":{"slug":"/experimental/about/usage","currentPage":"usage"}}