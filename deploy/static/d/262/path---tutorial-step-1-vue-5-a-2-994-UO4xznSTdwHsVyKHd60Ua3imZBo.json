{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"1. Installing Carbon\",\n  \"internal\": false,\n  \"tabs\": [\"React\", \"Vue\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar AnchorLinks = makeShortcode(\"AnchorLinks\");\nvar Row = makeShortcode(\"Row\");\nvar Column = makeShortcode(\"Column\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Starting with our Vue CLI generated app, let\\u2019s install Carbon and begin using Carbon components. By the end you will have a Vue app that uses the UI Shell to navigate between pages.\"), mdx(AnchorLinks, {\n    mdxType: \"AnchorLinks\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fork-clone-and-branch\"\n  }), \"Fork, clone and branch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#build-and-start\"\n  }), \"Build and start\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#install-carbon\"\n  }), \"Install Carbon\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#install-and-build-sass\"\n  }), \"Install and build Sass\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-ui-shell\"\n  }), \"Add UI Shell\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#create-pages\"\n  }), \"Create pages\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-routing\"\n  }), \"Add routing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#submit-pull-request\"\n  }), \"Submit pull request\")))), mdx(\"h2\", null, \"Preview\"), mdx(\"p\", null, \"A \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vue-step-2--carbon-tutorial-vue.netlify.com\"\n  }), \"preview\"), \" of what you will build:\"), mdx(Row, {\n    mdxType: \"Row\"\n  }, mdx(Column, {\n    offsetLg: \"4\",\n    mdxType: \"Column\"\n  }, mdx(\"iframe\", {\n    height: \"200\",\n    title: \"Carbon Tutorial Step 1\",\n    src: \"https://vue-step-2--carbon-tutorial-vue.netlify.com\",\n    frameborder: \"no\",\n    allowtransparency: \"true\",\n    allowfullscreen: \"true\",\n    className: \"bx--iframe bx--iframe--border\"\n  }))), mdx(\"h2\", null, \"Fork, clone and branch\"), mdx(\"p\", null, \"This tutorial has an accompanying GitHub repository called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" that we\\u2019ll use as a starting point for each step.\"), mdx(\"h3\", null, \"Fork\"), mdx(\"p\", null, \"To begin, fork \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" using your GitHub account.\"), mdx(\"h3\", null, \"Clone\"), mdx(\"p\", null, \"Go to your forked repository, copy the SSH or HTTPS URL and in your terminal run the two commands to get the repository in your local file system and enter that directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git clone [your fork SSH/HTTPS]\\n$ cd carbon-tutorial-vue\\n\")), mdx(\"h3\", null, \"Add upstream remote\"), mdx(\"p\", null, \"Add a remote called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"upstream\"), \" so we can eventually submit a pull request once you have completed this tutorial step.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git remote add upstream git@github.com:carbon-design-system/carbon-tutorial-vue.git\\n\")), mdx(\"p\", null, \"Or, if you prefer to use HTTPS instead of SSH with your remotes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git remote add upstream https://github.com/carbon-design-system/carbon-tutorial-vue.git\\n\")), mdx(\"p\", null, \"Verify that your forked repository remotes are correct:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git remote -v\\n\")), mdx(\"p\", null, \"Your terminal should output something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"origin  [your forked repo] (fetch)\\norigin  [your forked repo] (push)\\nupstream    git@github.com:carbon-design-system/carbon-tutorial-vue.git (fetch)\\nupstream    git@github.com:carbon-design-system/carbon-tutorial-vue.git (push)\\n\")), mdx(\"h3\", null, \"Branch\"), mdx(\"p\", null, \"Now that we have our repository set up, let\\u2019s check out the branch for this tutorial step\\u2019s starting point. Run the two commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git fetch upstream\\n$ git checkout -b vue-step-1 upstream/vue-step-1\\n\")), mdx(\"h2\", null, \"Build and start\"), mdx(\"p\", null, \"We have the repository forked to your GitHub account, cloned down to your machine, and the starting branch checked out. Next, install the Vue app\\u2019s dependencies with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn\\n\")), mdx(\"p\", null, \"After the dependencies are installed, you can start the app with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn serve\\n\")), mdx(\"p\", null, \"Your default browser should open up with an empty page that says: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.\")), mdx(\"p\", null, \"OK. So we made a small change to the Vue CLI geneated app replacing the HelloWorld component and replaced it with our own message and swapped out the facicon.\"), mdx(\"h2\", null, \"Install Carbon\"), mdx(\"p\", null, \"Even though we installed existing dependencies, we\\u2019ve yet to install the Carbon packages.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"carbon-components\"), \" - component styles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@carbon/vue\"), \" - Vue components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@carbon/icons-vue\"), \" - Vue icons\")), mdx(\"p\", null, \"Stop your development server with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL-C\"), \" and install Carbon dependencies with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn add carbon-components @carbon/vue @carbon/icons-vue\\n\")), mdx(\"h2\", null, \"Other dependencies\"), mdx(\"p\", null, \"If you checkout the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" on you\\u2019ll notice a few dependencies beyond those listed above. These were installed as part of the project creation using the Vue CLI. These include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"vue-router: Used to make routing in Vue apps simpler\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"@vue/cli-plugin-babel: To ensure we produce well supported code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"@vue/cli-plugin-eslint: To allow us to catch potential errors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"@vue/cli-plugin-unit-jest: To allow us to unit test our code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"node-sass: To allow us to use the sass css precompiler.\")), mdx(\"p\", null, \"NOTE: We could have installed these seperately but using the CLI to set this up for us ensures a good base config for these dependencies.\"), mdx(\"p\", null, \"To avoid having to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~\"), \" prefix when importing SCSS files from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \", create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env\"), \" file at the project root that contains:\"), mdx(\"h5\", null, \".env\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"SASS_PATH=\\\"node_modules\\\"\\n\")), mdx(\"p\", null, \"For the Windows operating system, use:\"), mdx(\"h5\", null, \".env\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"SASS_PATH=./node_modules\\n\")), mdx(\"p\", null, \"Then, start the app again. If your app\\u2019s currently running, you\\u2019ll need to restart it for the new environment variable to be used.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn serve\\n\")), mdx(\"p\", null, \"The app looks as it did before. Next, let\\u2019s add Carbon styling.\"), mdx(\"h3\", null, \"Import carbon-component styles\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory, create the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styles/\\\\_carbon.scss\"), \". Then in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.vue\"), \" edit the style tag to import it.\"), mdx(\"h4\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"<style lang=\\\"scss\\\">\\n@import \\\"./styles/carbon\\\";\\n</style>\\n\")), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styles/_carbon.scss\"), \", import the Carbon styles by adding the following at the top of the file:\"), mdx(\"h5\", null, \"src/styles/\", \"_\", \"carbon.scss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@import 'carbon-components/scss/globals/scss/styles';\\n\")), mdx(\"p\", null, \"This will take a moment for the Sass to compile. Once compiled, you\\u2019ll notice that the Carbon base styling is applied (IBM Plex Sans font family, font size, weight, colors, etc.)\"), mdx(\"p\", null, \"Because any change to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_carbon.scss\"), \" will re-compile all of the Carbon Sass, avoid making changes here unless instructed to do so. it is better to make them in the component files or a seperate file if needed.\"), mdx(\"p\", null, \"Next we\\u2019ll create a Carbon \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" to test that our dependencies are working properly.\"), mdx(\"h4\", null, \"src/main.js\"), mdx(\"p\", null, \"After the other imports in main.js and before the Vue instance is created add the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import CarbonComponentsVue from \\\"@carbon/vue\\\";\\nVue.use(CarbonComponentsVue);\\n\")), mdx(\"p\", null, \"This is a quick way to pull in all @carbon/vue components and register them for use in your project. Individual components can be imported to a project or component.\"), mdx(\"p\", null, \"e.g Instead of modifying src/main.js we could have added the following to src/App.vue\"), mdx(\"h5\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<script>\\nimport { CvButton } from '@carbon/vue';\\n\\nexport default {\\n  components: {\\n    CvButton,\\n  }\\n};\\n</script>\\n\")), mdx(\"p\", null, \"See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-components-vue/blob/master/packages/core/README.md#using-the-components-directly-or-individually\"\n  }), \"here\"), \" for other ways to load components from @carbon/vue components.\"), mdx(\"p\", null, \"In this tutorial we will stick to importing all of the components at once so we can focus on our use of @carbon/vue.\"), mdx(\"p\", null, \"Now open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.vue\"), \" component and replace:\"), mdx(\"h5\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.\\n\")), mdx(\"p\", null, \"with:\"), mdx(\"h5\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<CvButton>Button</CvButton>\\n\")), mdx(\"p\", null, \"or\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-button>Button</cv-button>\\n\")), mdx(\"p\", null, \"Congratulations, you\\u2019ve imported your first component! You should see a Carbon styled button on the page.\"), mdx(\"p\", null, \"NOTE: In this tutorial you can use either tag format. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vuejs.org/v2/style-guide/\"\n  }), \"Vue style guide\"), \" recommend sticking to either Pascal or kebab case. The examples from here will use Pascal case for file and component names with kebab case in the HTML.\"), mdx(\"h2\", null, \"Add UI Shell\"), mdx(\"p\", null, \"Next we\\u2019re going to create a Vue component called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" to use with the UI Shell Carbon component. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components\"), \" directory, create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" directory. Create the following files inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/TutorialHeader\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"src/components/TutorialHeader\\n\\u251C\\u2500\\u2500index.js\\n\\u2514\\u2500\\u2500TutorialHeader.vue\\n\")), mdx(\"h3\", null, \"Import and export the header\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/TutorialHeader/index.js\"), \", import and export our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" component like so:\"), mdx(\"h5\", null, \"src/components/TutorialHeader/index.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import TutorialHeader from './TutorialHeader';\\nexport default TutorialHeader;\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: This index.js files import/export is simply a convenience to shorten the path used to import the component and potentially import multiple components from one folder. The folder also provides us a handy location to add tests or documentation for the component.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: We could have simply created a file src/components/TutorialHeader.vue without the above benefits.\")), mdx(\"h4\", null, \"Lazyness - VSCode users only\"), mdx(\"p\", null, \"Now as a lazy programmer I like to take short cuts in my day, you should too. If you are using VSCode then you might want to add the following snippet which will when you type \\u2018index\\u2019 generate an index file for you based on the folder name.\"), mdx(\"h5\", null, \"javascript.json\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"  \\\"index-file\\\": {\\n    \\\"prefix\\\": \\\"index\\\",\\n    \\\"body\\\": [\\n      \\\"import ${TM_DIRECTORY/.*[\\\\\\\\/]//gm} from './${TM_DIRECTORY/.*[\\\\\\\\/]//gm}';\\\",\\n      \\\"export { \\\",\\n      \\\"\\\\t${TM_DIRECTORY/.*[\\\\\\\\/]//gm},\\\",\\n      \\\"};\\\",\\n      \\\"export default ${TM_DIRECTORY/.*[\\\\\\\\/]//gm}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Index file\\\"\\n  }\\n\")), mdx(\"p\", null, \"I also use the following to create a skeleton component of the form I typically use. To use this one start typing the word teamplate in your template file and it will generate a file maiking assumptions based on the compoent file name.\"), mdx(\"h5\", null, \"vue.json\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"  \\\"Vue_Component\\\": {\\n    \\\"prefix\\\": \\\"template\\\",\\n    \\\"body\\\": [\\n      \\\"<template>\\\",\\n      \\\"\\\\t$0\\\",\\n      \\\"</template>\\\",\\n      \\\"\\\",\\n      \\\"<script>\\\",\\n      \\\"export default {\\\",\\n      \\\"\\\\tname: '${TM_FILENAME/[\\\\\\\\.]vue//}'\\\",\\n      \\\"};\\\",\\n      \\\"</script>\\\",\\n      \\\"\\\",\\n      \\\"<style lang=\\\\\\\"scss\\\\\\\">\\\",\\n      \\\"</style>\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Single file template\\\"\\n  }\\n\")), mdx(\"p\", null, \"OK, back to using Carbon components. Let\\u2019s make use of our Carbon UI Shell components in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader.vue\"), \". Set up the file like so:\"), mdx(\"h5\", null, \"src/components/TutorialHeader/TutorialHeader.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <cv-header aria-label=\\\"Carbon tutorial\\\">\\n    <cv-skip-to-content href=\\\"#main-content\\\"\\n      >Skip to content</cv-skip-to-content\\n    >\\n\\n    <cv-header-name href=\\\"/\\\" prefix=\\\"IBM\\\">Carbon Tutorial</cv-header-name>\\n\\n    <cv-header-nav aria-label=\\\"Carbon tutorial nav\\\">\\n      <cv-header-menu-item href=\\\"/repos\\\">Repositories</cv-header-menu-item>\\n    </cv-header-nav>\\n\\n    <template slot=\\\"header-global\\\" />\\n  </cv-header>\\n</template>\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: you can find a description of the different components used UI Shell in our \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"http://vue.carbondesignsystem.com/?path=/story/components-cvuishell-header\"\n  }), \"carbon-componets-vue\"), \" package.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: When creating navigation headers, it\\u2019s important to have a\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Skip to content\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"link so keyboard users can skip the navigation items and go straight to the main content.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: It\\u2019s important that the\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"returns the Carbon\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvHeader\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as it\\u2019s containing element, as we\\u2019ll later be rendering\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.vue\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as a preceeding sibling of\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Content\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \", another UI Shell component. Those components need to live one after another for the UI Shell to properly render.\")), mdx(\"h3\", null, \"Import icons\"), mdx(\"p\", null, \"Now let\\u2019s import the icons from our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@carbon/icons-vue\"), \" elements package. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader.vue\"), \" file, we need to import each individual icon we will use.\"), mdx(\"h5\", null, \"src/components/TutorialHeader/TutorialHeader.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<script>\\nimport Notification20 from \\\"@carbon/icons-vue/es/notification/20\\\";\\nimport UserAvatar20 from \\\"@carbon/icons-vue/es/user--avatar/20\\\";\\nimport AppSwitcher20 from \\\"@carbon/icons-vue/es/app-switcher/20\\\";\\n\\nexport default {\\n  name: \\\"TutorialHeader\\\",\\n  components: { Notification20, UserAvatar20, AppSwitcher20 }\\n};\\n</script>\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: We\\u2019ve given our component a name here as part of the default export. This is optional in Vue but very useful in the \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://github.com/vuejs/vue-devtools\"\n  }), \"Vue developer tools\"), \".\")), mdx(\"p\", null, \"Then we need to add contnet to the \\u2018header-global\\u2019 slot where we will use our icons. These represent actions in the header a user can make. Replace:\"), mdx(\"h5\", null, \"src/components/TutorialHeader/TutorialHeader.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template slot=\\\"header-global\\\" />\\n\")), mdx(\"p\", null, \"With:\"), mdx(\"h5\", null, \"src/components/TutorialHeader/TutorialHeader.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template slot=\\\"header-global\\\">\\n  <cv-header-global-action aria-label=\\\"Notifications\\\">\\n    <Notification20 />\\n  </cv-header-global-action>\\n  <cv-header-global-action aria-label=\\\"User avatar\\\">\\n    <UserAvatar20 />\\n  </cv-header-global-action>\\n  <cv-header-global-action aria-label=\\\"App switcher\\\">\\n    <AppSwitcher20 />\\n  </cv-header-global-action>\\n</template>\\n\")), mdx(\"h3\", null, \"Render the header\"), mdx(\"p\", null, \"Next we\\u2019ll render our UI Shell by importing our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" component and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvContent\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.vue\"), \". Add a script tag if you don\\u2019t have one, then update it as follows:\"), mdx(\"h5\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<script>\\nimport TutorialHeader from \\\"./components/TutorialHeader\\\";\\n\\nexport default {\\n  name: \\\"App\\\",\\n  components: {\\n    TutorialHeader\\n  }\\n};\\n</script>\\n\")), mdx(\"p\", null, \"In addition to importing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TutorialHeader\"), \" component we have also declared it for use in our template by adding it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" property of our component.\"), mdx(\"p\", null, \"As our template currently just contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" it is still not rendering anything more interesting so let\\u2019s update that to include our imported components. This should look like the following:\"), mdx(\"h5\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <div id=\\\"app\\\">\\n    <tutorial-header />\\n    <cv-content id=\\\"#main-content\\\">\\n      <cv-button>Button</cv-button>\\n    </cv-content>\\n  </div>\\n</template>\\n\")), mdx(\"p\", null, \"You should now see a styled UI Shell header and a button below it.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: We\\u2019ve also sneaked in use of \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"CvContent\"), \" which needs to follow \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"CvHeader\"), \" to ensure the correct formatting. We could have included it as part of a shell component with TutorialHeader but have chosen not to in this case.\")), mdx(\"h2\", null, \"Create pages\"), mdx(\"p\", null, \"Next thing we need to do is create the files for our views.\"), mdx(\"p\", null, \"Since our app will have two pages, we\\u2019ll create two folders in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/views\"), \". Clear out the files currently in the views folder and add the following folders.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"src/views\\n\\u251C\\u2500\\u2500 LandingPage\\n\\u2514\\u2500\\u2500 RepoPage\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: We could adopt the same folder + index.js layout we did for the TutorialHeader component. However as our views only consist of a single component we\\u2019ll proceed with the simpler structure above.\")), mdx(\"p\", null, \"Create the following files in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage\"), \" folder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"src/view/LandingPage\\n\\u251C\\u2500\\u2500 index.js\\n\\u2514\\u2500\\u2500 LandingPage.vue\\n\")), mdx(\"p\", null, \"Create the following files in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage\"), \" folder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"src/view/RepoPage\\n\\u251C\\u2500\\u2500 index.js\\n\\u2514\\u2500\\u2500 RepoPage.vue\\n\")), mdx(\"h3\", null, \"Import and export content pages\"), mdx(\"p\", null, \"Starting with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage\"), \", just like with our header, we need to export the component in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/view/LandingPage/index.js\"), \" by adding:\"), mdx(\"h5\", null, \"src/view/LandingPage/index.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import LandingPage from './LandingPage';\\nexport default LandingPage;\\n\")), mdx(\"p\", null, \"Next in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \" we\\u2019ll create our component.\"), mdx(\"h5\", null, \"src/view/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <div>LANDING PAGE</div>\\n</template>\\n\")), mdx(\"p\", null, \"We\\u2019ll repeat this process with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage\"), \".\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/view/RepoPage/index.js\"), \", import and export the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage\"), \" component like so:\"), mdx(\"h5\", null, \"src/view/RepoPage/index.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import RepoPage from './RepoPage';\\nexport default RepoPage;\\n\")), mdx(\"p\", null, \"Then in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \" create the component.\"), mdx(\"h5\", null, \"src/view/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <div>REPO PAGE</div>\\n</template>\\n\")), mdx(\"p\", null, \"Awesome! We\\u2019ve just created our content pages. Next thing we need to do is render them with our router.\"), mdx(\"h2\", null, \"Add routing\"), mdx(\"p\", null, \"If you click on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Repositories\"), \" and then on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IBM Carbon Tutorial\"), \" you\\u2019ll notice a flicker as we hop from one page to another. We can fix this by using vue-router to manage our views.\"), mdx(\"p\", null, \"Lucky for you, as part of the Vue CLI project set up we added vue-router. This created the views folder and also added, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/router.js\"), \" and imported that into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main.js\"), \" for us.\"), mdx(\"h4\", null, \"src/router.js\"), mdx(\"p\", null, \"First let\\u2019s replae the contents of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/router.js\"), \" with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import Vue from 'vue';\\nimport Router from 'vue-router';\\nimport LandingPage from './views/LandingPage';\\n\\nVue.use(Router);\\n\\nexport default new Router({\\n  routes: [\\n    {\\n      path: '/',\\n      name: 'landing-page',\\n      component: LandingPage,\\n    },\\n    {\\n      path: '/repos',\\n      name: 'repo-page',\\n      // route level code-splitting\\n      // this generates a separate chunk (repo-page.[hash].js) for this route\\n      // which is lazy-loaded when the route is visited.\\n      component: () =>\\n        import(/* webpackChunkName: \\\"repo-page\\\" */ './views/RepoPage'),\\n    },\\n  ],\\n});\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: The landing page is loaded immediately, with the RepoPage lazy loaded. This is one simple way to create webpackChunks and is the default suggestion from the CLI plugin for vue-router.\")), mdx(\"p\", null, \"Next we need to update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/App.vue\"), \" to render these views.\"), mdx(\"p\", null, \"In the template section remove the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<cv-button />\"), \" and replace it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<router-vue />\"), \" as follows\"), mdx(\"h4\", null, \"src/App.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-content id=\\\"#main-content\\\">\\n  <router-view />\\n</cv-content>\\n\")), mdx(\"p\", null, \"After that we need to do a couple quick fixes to the UI Shell to have it work with the vue-router.\"), mdx(\"h5\", null, \"src/components/TutorialHeader/TutorialHeader.vue\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/TuturialHeader/TutorialHeader.vue\"), \" simpmly replace the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"href\"), \" attributes used in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cv-header-name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cv-header-menu-item\"), \" components with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"to\"), \". @carbon/vue will under the covers switch from use of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" tag to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router-link\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-header-name to=\\\"/\\\" prefix=\\\"IBM\\\">Carbon Tutorial</cv-header-name>\\n\")), mdx(\"p\", null, \"and\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-header-menu-item to=\\\"/repos\\\">Repositories</cv-header-menu-item>\\n\")), mdx(\"p\", null, \"You should now have a working header that routes to different pages without full page reload!\"), mdx(\"h2\", null, \"Submit pull request\"), mdx(\"p\", null, \"We\\u2019re going to submit a pull request to verify completion of this tutorial step and demonstrate a couple related concepts.\"), mdx(\"h3\", null, \"Continuous integration (CI) check\"), mdx(\"p\", null, \"We have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ci-check\"), \" script defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" that verifies file formatting for files that have been touched since the last Git commit with a tool called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io\"\n  }), \"Prettier\"), \". You\\u2019d typically also have that script run your test suite as part of your CI build. Go ahead and make sure everything looks good with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn ci-check\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: If the\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ci-check\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is giving an error, it\\u2019s likely that some of your source files are not properly formatted. This could happen if your text editor isn\\u2019t formatting with Prettier on save. To get\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ci-check\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"to pass, run\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn format\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \" then re-run\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn ci-check\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"h3\", null, \"Git commit and push\"), mdx(\"p\", null, \"Before we can create a pull request, stage and commit all of your changes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git add --all && git commit -m \\\"feat(tutorial): complete step 1\\\"\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: You\\u2019ll notice that your commit includes binaries in the \"), mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".yarn-offline-mirror\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \" folder. That\\u2019s expected as the repository is configured to run \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://yarnpkg.com/blog/2016/11/24/offline-mirror\"\n  }), \"Yarn offline\"), \" for more reliable builds. Future tutorial steps that don\\u2019t install new packages won\\u2019t have \"), mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".yarn-offline-mirror\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \" commit changes.\")), mdx(\"p\", null, \"Then, push to your repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git push origin vue-step-1\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: If your Git remote protocol is HTTPS instead of SSH, you may be prompted to authenticate with GitHub when you push changes. If your GitHub account has two-factor authentication enabled, we recommend that you follow these instructions to \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\"\n  }), \"create a personal access token for the command line\"), \". That lets you use your token instead of password when performing Git operations over HTTPS.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: If you receive a\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"non-fast-forward\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"error, it\\u2019s likely that your forked repository is behind the original repository and needs updated. This can happen if the tutorial was updated after you began working on it. To fix, run\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git pull upstream vue-step-1\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"to merge the changes into your branch, then you can try pushing again. Or, you can \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://help.github.com/en/articles/syncing-a-fork\"\n  }), \"manually merge\"), \" in the upstream changes.\")), mdx(\"h3\", null, \"Pull request (PR)\"), mdx(\"p\", null, \"Finally, visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" to \\u201CCompare & pull request\\u201D. In doing so, make sure that you are comparing to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-step-1\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base: vue-step-1\"), \". Take notice of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com\"\n  }), \"Netlify\"), \" bot that deploys a preview of your PR every time that you push new commits. These previews can be shared and viewed by anybody to assist the PR review process.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Expect your tutorial step PRs to be reviewed by the Carbon team but not merged. We\\u2019ll close your PR so we can keep the repository\\u2019s remote branches pristine and ready for the next person!\")));\n}\nMDXContent.isMDXComponent = true;"},"fields":{"slug":"/tutorial/step-1/vue","currentPage":"vue"},"frontmatter":{"title":"1. Installing Carbon","label":null,"tabs":["React","Vue"],"internal":false}}},"pageContext":{"slug":"/tutorial/step-1/vue","currentPage":"vue"}}