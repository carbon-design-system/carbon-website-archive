{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"2. Building pages\",\n  \"internal\": false,\n  \"tabs\": [\"React\", \"Vue\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar AnchorLinks = makeShortcode(\"AnchorLinks\");\nvar Row = makeShortcode(\"Row\");\nvar Column = makeShortcode(\"Column\");\nvar ImageComponent = makeShortcode(\"ImageComponent\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Now that we have a Vue app using the UI Shell, it\\u2019s time to build a few static pages. In this step, we\\u2019ll become comfortable with the Carbon grid and various Carbon components.\"), mdx(AnchorLinks, {\n    mdxType: \"AnchorLinks\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fork-clone-and-branch\"\n  }), \"Fork, clone and branch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#install-grid\"\n  }), \"Install grid\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-landing-page-grid\"\n  }), \"Add landing page grid\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#build-landing-page\"\n  }), \"Build landing page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#style-landing-page\"\n  }), \"Style landing page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-repo-page-grid\"\n  }), \"Add repo page grid\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#build-repo-page\"\n  }), \"Build repo page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#style-repo-page\"\n  }), \"Style repo page\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#submit-pull-request\"\n  }), \"Submit pull request\")))), mdx(\"h2\", null, \"Preview\"), mdx(\"p\", null, \"A \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vue-step-3--carbon-tutorial-vue.netlify.com\"\n  }), \"preview\"), \" of what you\\u2019ll build:\"), mdx(Row, {\n    mdxType: \"Row\"\n  }, mdx(Column, {\n    offsetLg: \"4\",\n    mdxType: \"Column\"\n  }, mdx(\"iframe\", {\n    height: \"400\",\n    title: \"Carbon Tutorial Step 2\",\n    src: \"https://vue-step-3--carbon-tutorial-vue.netlify.com\",\n    frameborder: \"no\",\n    allowtransparency: \"true\",\n    allowfullscreen: \"true\",\n    className: \"bx--iframe bx--iframe--border\"\n  }))), mdx(\"h2\", null, \"Fork, clone and branch\"), mdx(\"p\", null, \"This tutorial has an accompanying GitHub repository called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" that we\\u2019ll use as a starting point for each step. If you haven\\u2019t forked and cloned that repository yet, and haven\\u2019t added the upstream remote, go ahead and do so by following the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#fork-clone--branch\"\n  }), \"step 1 instructions\"), \".\"), mdx(\"h3\", null, \"Branch\"), mdx(\"p\", null, \"With your repository all set up, let\\u2019s check out the branch for this tutorial step\\u2019s starting point.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git fetch upstream\\n$ git checkout -b vue-step-2 upstream/vue-step-2\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: This builds on top of step 1, but be sure to check out the upstream step 2 branch because it includes the static assets required to get through this step.\")), mdx(\"h3\", null, \"Build and start app\"), mdx(\"p\", null, \"Install the app\\u2019s dependencies (in case you\\u2019re starting fresh in your current directory and not continuing from the previous step):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn\\n\")), mdx(\"p\", null, \"Then, start the app:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn serve\\n\")), mdx(\"p\", null, \"You should see something similar to where the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue\"\n  }), \"previous step\"), \" left off.\"), mdx(\"h2\", null, \"Install grid\"), mdx(\"p\", null, \"In our last step we added our styles, component and icon packages. Now that we\\u2019re building the pages with grid, we need to install one more Carbon package. Stop your development environment (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL-C\"), \") and:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn add @carbon/grid\\n\")), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_carbon.scss\"), \", we need to configure our grid to use 16 columns instead of the default 12 columns. We do this by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-columns-16: true\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$feature-flags\"), \".\"), mdx(\"h5\", null, \"src/styles/\", \"_\", \"carbon.scss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"$feature-flags: (\\n  grid-columns-16: true\\n);\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Like before, the feature flag still needs to come before the Carbon\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styles.scss\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"import.\")), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn serve\"), \" so we can begin building.\"), mdx(\"h2\", null, \"Add landing page grid\"), mdx(\"p\", null, \"Let\\u2019s add our grid elements to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.js\"), \".\"), mdx(\"p\", null, \"In order to use the grid, we need to wrap everything in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div className=\\\"bx--grid\\\">\"), \". We can continue to make rows by adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div className=\\\"bx--row\\\">\"), \" inside the grid, as well as make columns within those rows by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div className=\\\"bx--col-[breakpoint]-[size]\\\">\"), \".\"), mdx(\"p\", null, \"Our column sizes are specified by the number of columns they\\u2019ll be spanning. If we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--col-lg-4\"), \", it means it\\u2019ll span 4 of the 16 columns. If we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--col-lg-8\"), \" it means it\\u2019ll span 8 of the 16 columns, and so on.\"), mdx(\"p\", null, \"We\\u2019ve included the designs for this tutorial app in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"design.sketch\"), \" file found as a top-level file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"carbon-tutorial-vue\"), \" repository. But, if you don\\u2019t have Sketch installed and available to inspect the design, we\\u2019ll provide screenshots.\"), mdx(ImageComponent, {\n    cols: \"12\",\n    caption: \"Landing page grid\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"76.41921397379913%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Landing page grid\",\n    \"title\": \"\",\n    \"src\": \"/static/7f74bf609153609bb56b804b63244724/24bd0/landing-layout.png\",\n    \"srcSet\": [\"/static/7f74bf609153609bb56b804b63244724/7cb4c/landing-layout.png 280w\", \"/static/7f74bf609153609bb56b804b63244724/7ff44/landing-layout.png 560w\", \"/static/7f74bf609153609bb56b804b63244724/24bd0/landing-layout.png 1120w\", \"/static/7f74bf609153609bb56b804b63244724/7e58d/landing-layout.png 1680w\", \"/static/7f74bf609153609bb56b804b63244724/8ef2b/landing-layout.png 2240w\", \"/static/7f74bf609153609bb56b804b63244724/56754/landing-layout.png 2748w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pro tip:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL-L\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"toggles the layout in Sketch.\")), mdx(\"p\", null, \"We\\u2019ll break this down into three rows. The first row with the gray background doesn\\u2019t appear to need any columns. The second row with the white background looks like it has two columns of different widths. The third row with the gray background looks like it has four columns of equal width.\"), mdx(\"p\", null, \"We\\u2019ll make rows like so:\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template>\\n  <div className=\\\"bx--grid bx--grid--full-width landing-page\\\">\\n    <div className=\\\"bx--row landing-page__banner\\\">\\n      <div className=\\\"bx--col-lg-16\\\">1</div>\\n    </div>\\n    <div className=\\\"bx--row landing-page__r2\\\">\\n      <div className=\\\"bx--col-md-4 bx--col-lg-7\\\">7/16</div>\\n      <div className=\\\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\\\">8/16</div>\\n    </div>\\n    <div className=\\\"bx--row landing-page__r3\\\">\\n      <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">1/4</div>\\n      <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">1/4</div>\\n      <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">1/4</div>\\n      <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">1/4</div>\\n    </div>\\n  </div>\\n</template>\\n\")), mdx(\"p\", null, \"We added a class of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--grid--full-width\"), \" to the grid container since our rows need to expand the whole page without any margins. We also added some custom classes like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"landing-page\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"landing-page__banner\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"landing-page__r2\"), \", etc., which we will use later.\"), mdx(\"p\", null, \"Also, take notice of the second row. The tab content only covers 7 columns at this large viewport to prevent overly-large line lengths, so we needed to add a 1 column offset \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--offset-lg-1\"), \" to second column to fill the full 16 columns in the grid. Then, both of those columns have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bx--col-md-4\"), \" classes so they are of equal width at medium-sized viewports.\"), mdx(\"h2\", null, \"Build landing page\"), mdx(\"p\", null, \"We\\u2019ll start adding HTML elements and components by row.\"), mdx(\"h3\", null, \"First row\"), mdx(\"p\", null, \"In our first row we\\u2019ll use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvBreadcrumb\"), \" component.\"), mdx(\"p\", null, \"We can now add our component to the first row, along with a header, like so:\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div className=\\\"bx--row landing-page__banner\\\">\\n  <div class=\\\"bx--col-lg-16\\\">\\n    <cv-breadcrumb noTrailingSlash aria-label=\\\"Page navigation\\\">\\n      <cv-breadcrumb-item>\\n        <cv-link href=\\\"/\\\">Getting started</cv-link>\\n      </cv-breadcrumb-item>\\n    </cv-breadcrumb>\\n    <h1 class=\\\"landing-page__heading\\\">Design &amp; build with Carbon</h1>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, \"You may notice that the styles look off. Don\\u2019t worry, we\\u2019ll fix these later.\"), mdx(\"h3\", null, \"Second row\"), mdx(\"p\", null, \"In our second row we\\u2019ll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvTabs\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvButton\"), \" components.\"), mdx(\"p\", null, \"Modify the second row to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" component.\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"bx--row landing-page__r2\\\">\\n  <div class=\\\"bx--col bx--no-gutter\\\">\\n    <cv-tabs selected=\\\"0\\\">\\n      <cv-tab label=\\\"About\\\">\\n        <div class=\\\"bx--grid bx--grid--no-gutter bx--grid--full-width\\\">\\n          <div class=\\\"bx--row landing-page__tab-content\\\">\\n            <div class=\\\"bx--col-md-4 bx--col-lg-7\\\">7/16</div>\\n            <div class=\\\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\\\">\\n              8/16\\n            </div>\\n          </div>\\n        </div>\\n      </cv-tab>\\n      <cv-tab label=\\\"Design\\\">\\n        <div class=\\\"bx--grid bx--grid--no-gutter bx--grid--full-width\\\">\\n          <div class=\\\"bx--row landing-page__tab-content\\\">\\n            <div class=\\\"bx--col-lg-16\\\">\\n              Rapidly build beautiful and accessible experiences. The Carbon kit\\n              contains all resources you need to get started.\\n            </div>\\n          </div>\\n        </div>\\n      </cv-tab>\\n      <cv-tab label=\\\"Develop\\\">\\n        <div class=\\\"bx--grid bx--grid--no-gutter bx--grid--full-width\\\">\\n          <div class=\\\"bx--row landing-page__tab-content\\\">\\n            <div class=\\\"bx--col-lg-16\\\">\\n              Carbon provides styles and components in Vanilla, Vue, Angular,\\n              and Vue for anyone building on the web.\\n            </div>\\n          </div>\\n        </div>\\n      </cv-tab>\\n    </cv-tabs>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: We\\u2019re using the grid for the page layout, but we also need to apply the grid within the tab content. When doing so, make sure the nested grid has the expected\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \">\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"row\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \">\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"col\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DOM structure.\")), mdx(\"p\", null, \"Hold up! If you were to run \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ibm.com/able/dynamic-assessment-plug-in.html\"\n  }), \"DAP\"), \" to check for accessibility violations, you\\u2019d see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Multiple navigation landmarks must have unique labels specified with aria-label or aria-labelledby\"), \" because both the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvBreadcrumb\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvTabs\"), \" components use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \" elements. To fix, add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvBreadcrumb\"), \" opening tag:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-breadcrumb noTrailingSlash aria-label=\\\"Page navigation\\\">\\n\")), mdx(\"p\", null, \"Same goes for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvTabs\"), \" opening tag:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-tabs selected=\\\"0\\\" aria-label=\\\"Tab navigation\\\">\\n\")), mdx(\"p\", null, \"Give yourself a pat on the back if you actually ran the DAP tool and added an aria label to the header navigation too. We\\u2019ll install the DAP tool in a later step, so don\\u2019t worry if you didn\\u2019t.\"), mdx(\"p\", null, \"Next, we\\u2019ll need to add a styling override to move the tabs to the right on large viewports. Create a file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_carbon-overrides.scss\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/content/LandingPage\"), \" with this declaration block.\"), mdx(\"h5\", null, \"src/content/LandingPage/\", \"_\", \"carbon-overrides.scss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__r2 .bx--tabs__nav {\\n  right: 0;\\n}\\n\")), mdx(\"p\", null, \"Then in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \" add a style section with this import.\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<style lang=\\\"scss\\\">\\n@import \\\"./carbon-overrides\\\";\\n</style>\\n```\\n<!-- prettier-ignore-end -->\\n\\n_Note: We don't have to include this in a separate file, but it's nice to keep overrides separate from your_\\napplication's styling so when migrating to future Carbon versions and if there are breaking changes via different class\\nnames, you have a consolidated list of styling declaration blocks to review._ We can now add our images and text for\\neach column in the first `CvTab` in `LandingPage.vue`.\\n\\n##### src/content/LandingPage/LandingPage.vue\\n\\n<!-- prettier-ignore-start -->\\n```html\\n<cv-tab label=\\\"About\\\">\\n  <div class=\\\"bx--grid bx--grid--no-gutter bx--grid--full-width\\\">\\n    <div class=\\\"bx--row landing-page__tab-content\\\">\\n      <div class=\\\"bx--col-md-4 bx--col-lg-7\\\">\\n        <h2 class=\\\"landing-page__subheading\\\">What is Carbon?</h2>\\n        <p class=\\\"landing-page__p\\\">\\n          Carbon is IBM\\u2019s open-source design system for digital\\n          products and experiences. With the IBM Design Language as\\n          its foundation, the system consists of working code, design\\n          tools and resources, human interface guidelines, and a\\n          vibrant community of contributors.\\n        </p>\\n        <cv-button>Learn more</cv-button>\\n      </div>\\n      <div class=\\\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\\\">\\n        <img\\n          class=\\\"landing-page__illo\\\"\\n          src=\\\"../../assets/tab-illo.png\\\"\\n          alt=\\\"Carbon illustration\\\"\\n        />\\n      </div>\\n    </div>\\n  </div>\\n</cv-tab>\\n\")), mdx(\"p\", null, \"Now let\\u2019s set the image size in the style section of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \":\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__illo {\\n  max-width: 100%;\\n}\\n\")), mdx(\"p\", null, \"Assuming that the second and third tab would have a similar design, we would set them up in the same way. However, since our design specs don\\u2019t show those tabs, we\\u2019ll leave the code as is.\"), mdx(\"h3\", null, \"Third row\"), mdx(\"p\", null, \"The third row will be created in a later tutorial, so we\\u2019ll just add the headers for now.\"), mdx(\"h5\", null, \"src/content/LandingPage/LandingPage.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div className=\\\"bx--row landing-page__r3\\\">\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">\\n    <h3 className=\\\"landing-page__label\\\">The Principles</h3>\\n  </div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Open</div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Modular</div>\\n  <div className=\\\"bx--col-md-4 bx--col-lg-4\\\">Carbon is Consistent</div>\\n</div>\\n\")), mdx(\"h2\", null, \"Style landing page\"), mdx(\"p\", null, \"We\\u2019ve added basic layout styles in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \", so now let\\u2019s add type, color and spacing styles to match the design. We\\u2019ll be using our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.carbondesignsystem.com/guidelines/spacing\"\n  }), \"spacing tokens\"), \". In a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/styles/_carbon-utils.scss\"), \", add these imports at the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"top\"), \" of the file so we can use Carbon breakpoints, tokens, and typography Sass mixins and functions:\"), mdx(\"h5\", null, \"src/styles/\", \"_\", \"carbon-utils.scss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@import 'carbon-components/scss/globals/scss/vendor/@carbon/type/scss/font-family.scss';\\n@import 'carbon-components/scss/globals/scss/vendor/@carbon/layout/scss/breakpoint.scss';\\n@import 'carbon-components/scss/globals/scss/typography.scss';\\n@import 'carbon-components/scss/globals/scss/vars.scss';\\n\")), mdx(\"p\", null, \"Adding these tokesn, mixins etc. here means we can import them with a single line into any component that needs them.\"), mdx(\"h3\", null, \"Banner\"), mdx(ImageComponent, {\n    cols: \"8\",\n    caption: \"Banner vertical spacing\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"42.79411764705882%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Banner vertical spacing\",\n    \"title\": \"\",\n    \"src\": \"/static/13033ffbcd2fa2128eac6e3c8bef7ea7/24bd0/landing-r1-spacing.png\",\n    \"srcSet\": [\"/static/13033ffbcd2fa2128eac6e3c8bef7ea7/7cb4c/landing-r1-spacing.png 280w\", \"/static/13033ffbcd2fa2128eac6e3c8bef7ea7/7ff44/landing-r1-spacing.png 560w\", \"/static/13033ffbcd2fa2128eac6e3c8bef7ea7/24bd0/landing-r1-spacing.png 1120w\", \"/static/13033ffbcd2fa2128eac6e3c8bef7ea7/f3a63/landing-r1-spacing.png 1360w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pro tip:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL-G\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"toggles the grid in Sketch.\")), mdx(\"p\", null, \"Back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \", we need to add space above the breadcrumb and below the heading. For that, add:\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@import '../../styles/carbon-utils';\\n\")), mdx(\"p\", null, \"and\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__banner {\\n  padding-top: $spacing-05;\\n  padding-bottom: $spacing-07 * 4;\\n}\\n\")), mdx(\"p\", null, \"Referencing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.carbondesignsystem.com/guidelines/spacing#spacing-scale\"\n  }), \"spacing token table\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16px\"), \" can be set with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$spacing-05\"), \" token. The design calls for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"128px\"), \" of space below the heading and that\\u2019s not in the spacing scale, we can achieve that in Sass by multiplying 32px (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$spacing-07\"), \") by 4. We could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"128px\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8rem\"), \" directly in our styling, but using our tokens preserves consistency should the token values get updated in the future.\"), mdx(\"p\", null, \"Looking at the design, we need a wall-to-wall light gray background behind the banner and also behind the third row. This is a great opportunity to use a Sass mixin. We could put this at the top of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \", but it\\u2019s best practice to place mixins in a dedicated file, so create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_mixins.scss\"), \" file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/content/LandingPage\"), \".\"), mdx(\"p\", null, \"Add the following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_mixins.scss\"), \". Per the design we need to use Gray 10 for our banner background color, which can be set with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ui-01\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.carbondesignsystem.com/guidelines/color/usage\"\n  }), \"color token\"), \". Also, we want the background to extend into the grid\\u2019s outermost gutters to go the full width of the viewport, so given the DOM structure, we can achieve that by setting the background in an absolutely positioned pseudo element.\"), mdx(\"h5\", null, \"src/content/LandingPage/\", \"_\", \"mixins.scss\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@mixin landing-page-background() {\\n  background-color: $ui-01;\\n  position: relative;\\n\\n  &::before {\\n    content: '';\\n    position: absolute;\\n    left: -$spacing-05;\\n    top: 0;\\n    right: -$spacing-05;\\n    bottom: 0;\\n    background: $ui-01;\\n    z-index: -1;\\n  }\\n}\\n\")), mdx(\"p\", null, \"After you have created \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_mixins.scss\"), \", import it at the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"top\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LandingPage.vue\"), \". By now you should have two imports:\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@import './mixins.scss';\\n@import './overrides.scss';\\n\")), mdx(\"p\", null, \"Now to use the new mixin, update the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".landing-page__banner\"), \" declaration block to:\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__banner {\\n  padding-top: $spacing-05;\\n  padding-bottom: $spacing-07 * 4;\\n  @include landing-page-background;\\n}\\n\")), mdx(\"p\", null, \"Next, we can see that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h1\"), \" is using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heading-05\"), \" type token.\"), mdx(ImageComponent, {\n    cols: \"8\",\n    caption: \"Banner heading type\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"61.029411764705884%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Banner heading type\",\n    \"title\": \"\",\n    \"src\": \"/static/c7190e1685d5378baf9db14edf1269de/24bd0/landing-r1-type.png\",\n    \"srcSet\": [\"/static/c7190e1685d5378baf9db14edf1269de/7cb4c/landing-r1-type.png 280w\", \"/static/c7190e1685d5378baf9db14edf1269de/7ff44/landing-r1-type.png 560w\", \"/static/c7190e1685d5378baf9db14edf1269de/24bd0/landing-r1-type.png 1120w\", \"/static/c7190e1685d5378baf9db14edf1269de/f3a63/landing-r1-type.png 1360w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"p\", null, \"The Sketch symbol naming is consistent with the development Sass tokens to help translate design to development. So, looking up the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.carbondesignsystem.com/guidelines/typography/productive\"\n  }), \"type token\"), \", we know to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"productive-heading-05\"), \":\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"@import '../../styles/carbon-utils';\\n\\n.landing-page__heading {\\n  @include carbon--type-style('productive-heading-05');\\n}\\n\")), mdx(\"h3\", null, \"Row two\"), mdx(\"p\", null, \"For our second row, we need to fix the tabs vertical positioning to match the design. By inspecting the tabs component, you can see that the tab height computes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"40px\"), \". We can use that to create our negative top margin in rem units.\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__r2 {\\n  margin-top: rem(-40px);\\n}\\n\")), mdx(\"p\", null, \"We also need to adust our vertical spacing and type treatment. Like before, it\\u2019s a matter of using spacing and type tokens like so:\"), mdx(ImageComponent, {\n    cols: \"8\",\n    caption: \"Row 2 vertical spacing\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"58.970588235294116%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Row 2 vertical spacing\",\n    \"title\": \"\",\n    \"src\": \"/static/33ed6696287eb1b5eb002b64b02773f7/24bd0/landing-r2-spacing.png\",\n    \"srcSet\": [\"/static/33ed6696287eb1b5eb002b64b02773f7/7cb4c/landing-r2-spacing.png 280w\", \"/static/33ed6696287eb1b5eb002b64b02773f7/7ff44/landing-r2-spacing.png 560w\", \"/static/33ed6696287eb1b5eb002b64b02773f7/24bd0/landing-r2-spacing.png 1120w\", \"/static/33ed6696287eb1b5eb002b64b02773f7/f3a63/landing-r2-spacing.png 1360w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: You may be wondering why there are vertical gaps between the type and spacers. Each type token has a line height that\\u2019s suited for its font size. The vertical spacers adjacently touch the line height boundaries and not the baseline, for consistency as well as development ease so\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"margins\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"paddings\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"don\\u2019t need to offset line heights.\")), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__tab-content {\\n  padding-top: $layout-05;\\n  padding-bottom: $layout-05;\\n}\\n\\n.landing-page__subheading {\\n  @include carbon--type-style('productive-heading-03');\\n  @include carbon--font-weight('semibold');\\n}\\n\\n.landing-page__p {\\n  @include carbon--type-style('productive-heading-03');\\n  margin-top: $spacing-06;\\n  margin-bottom: $spacing-08;\\n\\n  @include carbon--breakpoint-between((320px + 1), md) {\\n    max-width: 75%;\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Row three\"), mdx(ImageComponent, {\n    cols: \"8\",\n    caption: \"Row 3 vertical spacing\",\n    mdxType: \"ImageComponent\"\n  }, mdx(\"span\", {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"maxWidth\": \"1120px\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    }\n  }, \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"24.558823529411764%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px transparent\"\n    },\n    \"alt\": \"Row 3 vertical spacing\",\n    \"title\": \"\",\n    \"src\": \"/static/014fc9b6ccd2fa4a8691bb8abd966c94/24bd0/landing-r3-spacing.png\",\n    \"srcSet\": [\"/static/014fc9b6ccd2fa4a8691bb8abd966c94/7cb4c/landing-r3-spacing.png 280w\", \"/static/014fc9b6ccd2fa4a8691bb8abd966c94/7ff44/landing-r3-spacing.png 560w\", \"/static/014fc9b6ccd2fa4a8691bb8abd966c94/24bd0/landing-r3-spacing.png 1120w\", \"/static/014fc9b6ccd2fa4a8691bb8abd966c94/f3a63/landing-r3-spacing.png 1360w\"],\n    \"sizes\": \"(max-width: 1120px) 100vw, 1120px\"\n  })), \"\\n  \")), mdx(\"p\", null, \"Let\\u2019s also add some styles for the last row, even though that will get used later in the tutorial. You\\u2019ll notice that we get to re-use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"landing-page-background\"), \" mixin that we just created.\"), mdx(\"h5\", null, \"src/content/LandingPage/\\\\LandingPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \".landing-page__r3 {\\n  padding-top: $spacing-09;\\n  padding-bottom: $spacing-09;\\n  @include landing-page-background;\\n}\\n\\n.landing-page__label {\\n  @include carbon--type-style('heading-01');\\n}\\n\")), mdx(\"p\", null, \"Ta-da! You should see a finished landing page! Now we can move on to the repo page.\"), mdx(\"h2\", null, \"Add repo page grid\"), mdx(\"p\", null, \"Now in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \" we\\u2019ll add our grid containers in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"return\"), \" section.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div className=\\\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\\\">\\n  <div className=\\\"bx--row repo-page__r1\\\">\\n    <div className=\\\"bx--col-lg-16\\\">Data table will go here</div>\\n  </div>\\n</div>\\n\")), mdx(\"h2\", null, \"Build repo page\"), mdx(\"p\", null, \"We currently have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \" that just contains a grid and placeholder content for the time being. In the next tutorial step we\\u2019re going to be querying an API to populate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvDataTable\"), \" component in this page. As a best practice to separate data fetching from the presentation components, go ahead and create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable.vue\"), \" as a sibling to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/content/RepoPage\"), \".\"), mdx(\"h3\", null, \"Build data table\"), mdx(\"p\", null, \"First, let\\u2019s pretend we\\u2019ve already built out table component and update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\")), mdx(\"p\", null, \"Import \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \".\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import RepoTable from './RepoTable';\\n\")), mdx(\"p\", null, \"Then below the imports, include the following arrays to pass into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" component. We\\u2019ll be setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rows\"), \" array from an API in the next tutorial step, but for now, static example rows will suffice.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const headers = [\\n  {\\n    key: 'name',\\n    header: 'Name',\\n  },\\n  {\\n    key: 'createdAt',\\n    header: 'Created',\\n  },\\n  {\\n    key: 'updatedAt',\\n    header: 'Updated',\\n  },\\n  {\\n    key: 'issueCount',\\n    header: 'Open Issues',\\n  },\\n  {\\n    key: 'stars',\\n    header: 'Stars',\\n  },\\n  {\\n    key: 'links',\\n    header: 'Links',\\n  },\\n];\\n\\nconst rows = [\\n  {\\n    id: '1',\\n    name: 'Repo 1',\\n    createdAt: 'Date',\\n    updatedAt: 'Date',\\n    issueCount: '123',\\n    stars: '456',\\n    links: 'Links',\\n  },\\n  {\\n    id: '2',\\n    name: 'Repo 2',\\n    createdAt: 'Date',\\n    updatedAt: 'Date',\\n    issueCount: '123',\\n    stars: '456',\\n    links: 'Links',\\n  },\\n  {\\n    id: '3',\\n    name: 'Repo 3',\\n    createdAt: 'Date',\\n    updatedAt: 'Date',\\n    issueCount: '123',\\n    stars: '456',\\n    links: 'Links',\\n  },\\n];\\n\")), mdx(\"p\", null, \"Next we need to make sure the RepoTable component and these arrays are available to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage\"), \" component template. Your component export should look like the following to achieve this.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"export default {\\n  name: 'RepoPage',\\n  components: { RepoTable },\\n  data() {\\n    return {\\n      headers,\\n      rows,\\n    };\\n  },\\n};\\n\")), mdx(\"p\", null, \"Lastly in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \" template, we need to simply replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Data table will go here\"), \" with:\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<RepoTable\\n  :headers=\\\"headers\\\"\\n  :rows=\\\"rows\\\"\\n  title=\\\"Carbon Repositories\\\"\\n  helperText=\\\"A collection of public Carbon repositories.\\\"\\n/>\\n\")), mdx(\"p\", null, \"OK. So now our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \" component is ready to use a component called \\u2018RepoTable\\u2019 so let\\u2019s created it so our page displays again.\"), mdx(\"p\", null, \"First create a script section as follows:\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"export default {\\n  name: 'RepoTable',\\n  props: {\\n    headers: Array,\\n    rows: Array,\\n    title: String,\\n    helperText: String,\\n  },\\n  computed: {\\n    columns() {\\n      return this.headers.map(header => header.header);\\n    },\\n    data() {\\n      return this.rows.map(row => ({\\n        data: [\\n          row.name,\\n          row.createdAt,\\n          row.updatedAt,\\n          row.issueCount,\\n          row.stars,\\n          row.links,\\n        ],\\n        description: 'Row description',\\n      }));\\n    },\\n  },\\n};\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Computed properties are used to transform headers and rows into a format convenient for rendering with the CvDataTable components.\")), mdx(\"p\", null, \"Then, let\\u2019s create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoTable\"), \" template starting with the cv-data-table component.\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoTable.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<cv-data-table :columns=\\\"columns\\\" :title=\\\"title\\\" :helper-text=\\\"helperText\\\">\\n</cv-data-table>\\n\")), mdx(\"p\", null, \"Here we pass in the columns, title and helper text. If you view this you will see an empty table with headings.\"), mdx(\"p\", null, \"Next add the rows inside of cv-data-table.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template slot=\\\"data\\\">\\n  <cv-data-table-row v-for=\\\"(row, rowIndex) in data\\\" :key=\\\"`${rowIndex}`\\\"> </cv-data-table-row>\\n</template>\\n<!-- prettier-ignore-end -->\\n\\nHere we use v-for to iterate through the data assigning a key and value to each row. The rendered output may not appear\\nto have changed, although if you inspect using the developer tools you will find three empty rows. Next add the cell\\ndata inside the `cv-data-table-row` component.\\n\\n<!-- prettier-ignore-start -->\\n```html\\n<cv-data-table-cell\\n  v-for=\\\"(cell, cellIndex) in row.data\\\"\\n  :key=\\\"`${cellIndex}`\\\"\\n  >{{cell}}</cv-data-table-cell\\n>\\n\")), mdx(\"p\", null, \"Again we\\u2019ve used the v-for directive to iterate through our data adding key, value and the contents of the cell.\"), mdx(\"p\", null, \"The last item we need to add is the description shown in the expanded content. Add the following as a sibling of cv-data-table-cell component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<template slot=\\\"expandedContent\\\">\\n{{ row.description }}\\n</template>\\n\")), mdx(\"p\", null, \"Now you should have a working page rendering the sample content from the rows array.\"), mdx(\"p\", null, \"This component consumes our properties and returns a Carbon \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CvDataTable\"), \". As for where the various \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Table*\"), \" components came from? The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default\"\n  }), \"CvDataTable story\"), \" in Storybook was used to put together the data table structure.\"), mdx(\"h2\", null, \"Style repo page\"), mdx(\"p\", null, \"Our styles for the repo page are mostly fine. We just need to update a few vertical spacing issues.\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RepoPage.vue\"), \", add the following style section:\"), mdx(\"h5\", null, \"src/content/RepoPage/RepoPage.vue\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"<style lang=\\\"scss\\\">\\n@import \\\"../../styles/carbon-utils\\\";\\n\\n.repo-page .bx--row {\\n  padding-top: $spacing-05;\\n  padding-bottom: $spacing-05;\\n}\\n</style>\\n\")), mdx(\"p\", null, \"Congratulations! We\\u2019ve now created our static repo page!\"), mdx(\"h2\", null, \"Submit pull request\"), mdx(\"p\", null, \"We\\u2019re going to submit a pull request to verify completion of this tutorial step.\"), mdx(\"h3\", null, \"Continuous integration (CI) check\"), mdx(\"p\", null, \"Run the CI check to make sure we\\u2019re all set to submit a pull request.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn ci-check\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Having issues running the CI check? \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#continuous-integration-(ci)-check\"\n  }), \"Step 1\"), \" has troubleshooting notes that may help.\")), mdx(\"h3\", null, \"Git commit and push\"), mdx(\"p\", null, \"Before we can create a pull request, stage and commit all of your changes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git add --all && git commit -m \\\"feat(tutorial): complete step 2\\\"\\n\")), mdx(\"p\", null, \"Then, push to your repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ git push origin vue-step-2\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Having issues pushing your changes? \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"/tutorial/step-1/vue#git-commit-and-push\"\n  }), \"Step 1\"), \" has troubleshooting notes that may help.\")), mdx(\"h3\", null, \"Pull request (PR)\"), mdx(\"p\", null, \"Finally, visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/carbon-design-system/carbon-tutorial-vue\"\n  }), \"carbon-tutorial-vue\"), \" to \\u201CCompare & pull request\\u201D. In doing so, make sure that you are comparing to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue-step-2\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base: vue-step-2\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Expect your tutorial step PRs to be reviewed by the Carbon team but not merged. We\\u2019ll close your PR so we can keep the repository\\u2019s remote branches pristine and ready for the next person!\")));\n}\nMDXContent.isMDXComponent = true;"},"fields":{"slug":"/tutorial/step-2/vue","currentPage":"vue"},"frontmatter":{"title":"2. Building pages","label":null,"tabs":["React","Vue"],"internal":false}}},"pageContext":{"slug":"/tutorial/step-2/vue","currentPage":"vue"}}